{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAsBO,OACxCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAWH,GAD9C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QATxB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAjBH,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAGjC,OACI,sBAAKc,UAAU,2CAAf,UACI,qBAAKC,IAAOf,EAAMgB,IAAMN,IACxB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAZAC,qBAAW,WAEPxB,EAAUC,GACLwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAItB,CAACpB,IAEIqB,EDjByBK,CAAc1B,GAAjCa,EAFsB,EAE3BN,KAAYa,EAFe,EAEfA,QAEpB,OAEI,cADA,CACA,sBACA,oBAAIJ,UAAU,cAAd,SAA6BhB,IAE3BoB,GAAW,mBAAGJ,UAAU,mCAAb,uBAEb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEhBzBgB,EAAe,WAAM,MAGOzC,mBAAS,CAAC,iBAHjB,mBAGvB0C,EAHuB,KAGV3C,EAHU,KAS9B,OACI,eAAC,WAAD,WACI,gDACA,cAAC,EAAD,CAAcA,cAAiBA,IAC/B,uBACA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADPA,Y,MCjBlC6B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.51b2ff31.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport propTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    \r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length >2){\r\n            setCategories(cate => [ inputValue , ...cate]);\r\n            setinputValue('');\r\n        }    \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue} \r\n                onChange={ handleInputChange }\r\n            /> \r\n        </form>          \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : propTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=83Gujwj8MP3BBqzNGL9kz4j30OIXSBAU`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map ( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url : img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs ;\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title,url }) => {\r\n\r\n\r\n    return (\r\n        <div className=\"animate__animated animate__fadeInUp card\">\r\n            <img src ={ url } alt={ title } />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n   // Aca se guarda en la variable la data (las imagenes) y el estado de la carga\r\n    const { data:images,loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        /* Esta parte del codigo se encarga de tomar las imagenes y colocarlo en el html*/\r\n        <>\r\n        <h3 className=\"h3-category\">{category}</h3>\r\n\r\n        { loading && <p className=\"animate__animated animate__flash\"> loading </p> }\r\n        \r\n        <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem  \r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                        \r\n                    ))\r\n                }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n   \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    \r\n    // Este use effect se fija que si cambio la category vuelva a ejecutar este codigo \r\n    useEffect( () => {\r\n\r\n        getGifs ( category )\r\n            .then( imgs => {\r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false\r\n                });\r\n            })\r\n\r\n    },[category])  \r\n\r\n    return state;// retorna objeto{data:[] , loading:true}\r\n\r\n}\r\n","import React, { Fragment, useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    //const categorias = ['One Punche' ,'Samurai X','Dragon Ball'];\r\n    const [categories , setCategories] = useState(['Boca Juniors']);\r\n\r\n    /*const handleAdd = () => {\r\n        setCategories(categories.concat('HunterXHunter'));\r\n    }*/\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory  setCategories = {setCategories}/>   \r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( category => \r\n                        <GifGrid\r\n                            key= {category} \r\n                            category = { category } \r\n                        />\r\n                    )}\r\n            </ol>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}